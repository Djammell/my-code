{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "transition_probs = {\n",
    "    's0':{\n",
    "        'a0':{'s0':0.5,'s2':0.5},\n",
    "        'a1':{'s2':1.0}},\n",
    "    's1':{\n",
    "        'a0':{'s0':0.7,'s1':0.1,'s2':0.2},\n",
    "        'a1':{'s1':0.95,'s2':0.05}},\n",
    "    's2':{\n",
    "        'a0':{'s0':0.4,'s2':0.6},\n",
    "        'a1':{'s0':0.3,'s1':0.3,'s2':0.4}\n",
    "    }\n",
    "}\n",
    "rewards = {\n",
    "    's1':{'a0':{'s0':+5}},\n",
    "    's2':{'a1':{'s0':+1}}\n",
    "}\n",
    "from mdp import MDP\n",
    "mdp = MDP(transition_probs, rewards, initial_state='s0')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_action_value(mdp, state_values, state, action, gamma):\n",
    "    #вычисляем значение Q-функции\n",
    "    q_value = 0.0\n",
    "    for next_state in mdp.get_next_states(state, action):\n",
    "        transition_prob = mdp.get_transition_prob(state, action, next_state)\n",
    "        reward = mdp.get_reward(state, action, next_state)\n",
    "        q_value += transition_prob*(reward+gamma*state_values[next_state])\n",
    "     \n",
    "    return q_value"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_new_state_value(mdp, state_values, state, gamma):\n",
    "    \"\"\" Computes next V(s) as in formula above. Please do not change state_values in process. \"\"\"\n",
    "    if mdp.is_terminal(state): return 0\n",
    "   \n",
    "    return max(\n",
    "        get_action_value(\n",
    "            mdp, state_values, state, next_action, gamma\n",
    "        ) for next_action in mdp.get_possible_actions(state))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "iter    0   |   diff: 3.50000   |   V(s0) = 0.000   V(s1) = 0.000   V(s2) = 0.000\n",
      "\n",
      "iter    1   |   diff: 1.05300   |   V(s0) = 0.000   V(s1) = 3.500   V(s2) = 0.300\n",
      "\n",
      "iter    2   |   diff: 0.94770   |   V(s0) = 0.270   V(s1) = 3.869   V(s2) = 1.353\n",
      "\n",
      "iter    3   |   diff: 0.73170   |   V(s0) = 1.218   V(s1) = 4.262   V(s2) = 1.905\n",
      "\n",
      "iter    4   |   diff: 0.53339   |   V(s0) = 1.714   V(s1) = 4.994   V(s2) = 2.465\n",
      "\n",
      "iter    5   |   diff: 0.48005   |   V(s0) = 2.219   V(s1) = 5.473   V(s2) = 2.999\n",
      "\n",
      "iter    6   |   diff: 0.42595   |   V(s0) = 2.699   V(s1) = 5.930   V(s2) = 3.456\n",
      "\n",
      "iter    7   |   diff: 0.37662   |   V(s0) = 3.111   V(s1) = 6.356   V(s2) = 3.874\n",
      "\n",
      "iter    8   |   diff: 0.33896   |   V(s0) = 3.487   V(s1) = 6.729   V(s2) = 4.251\n",
      "\n",
      "iter    9   |   diff: 0.30480   |   V(s0) = 3.826   V(s1) = 7.067   V(s2) = 4.588\n",
      "\n",
      "iter   10   |   diff: 0.27402   |   V(s0) = 4.130   V(s1) = 7.372   V(s2) = 4.893\n",
      "\n",
      "iter   11   |   diff: 0.24659   |   V(s0) = 4.404   V(s1) = 7.646   V(s2) = 5.167\n",
      "\n",
      "iter   12   |   diff: 0.22192   |   V(s0) = 4.650   V(s1) = 7.892   V(s2) = 5.413\n",
      "\n",
      "iter   13   |   diff: 0.19972   |   V(s0) = 4.872   V(s1) = 8.114   V(s2) = 5.635\n",
      "\n",
      "iter   14   |   diff: 0.17975   |   V(s0) = 5.072   V(s1) = 8.314   V(s2) = 5.835\n",
      "\n",
      "iter   15   |   diff: 0.16177   |   V(s0) = 5.252   V(s1) = 8.494   V(s2) = 6.015\n",
      "\n",
      "iter   16   |   diff: 0.14559   |   V(s0) = 5.413   V(s1) = 8.656   V(s2) = 6.177\n",
      "\n",
      "iter   17   |   diff: 0.13104   |   V(s0) = 5.559   V(s1) = 8.801   V(s2) = 6.322\n",
      "\n",
      "iter   18   |   diff: 0.11793   |   V(s0) = 5.690   V(s1) = 8.932   V(s2) = 6.453\n",
      "\n",
      "iter   19   |   diff: 0.10614   |   V(s0) = 5.808   V(s1) = 9.050   V(s2) = 6.571\n",
      "\n",
      "iter   20   |   diff: 0.09552   |   V(s0) = 5.914   V(s1) = 9.156   V(s2) = 6.677\n",
      "\n",
      "iter   21   |   diff: 0.08597   |   V(s0) = 6.010   V(s1) = 9.252   V(s2) = 6.773\n",
      "\n",
      "iter   22   |   diff: 0.07737   |   V(s0) = 6.096   V(s1) = 9.338   V(s2) = 6.859\n",
      "\n",
      "iter   23   |   diff: 0.06964   |   V(s0) = 6.173   V(s1) = 9.415   V(s2) = 6.936\n",
      "\n",
      "iter   24   |   diff: 0.06267   |   V(s0) = 6.243   V(s1) = 9.485   V(s2) = 7.006\n",
      "\n",
      "iter   25   |   diff: 0.05641   |   V(s0) = 6.305   V(s1) = 9.547   V(s2) = 7.068\n",
      "\n",
      "iter   26   |   diff: 0.05077   |   V(s0) = 6.362   V(s1) = 9.604   V(s2) = 7.125\n",
      "\n",
      "iter   27   |   diff: 0.04569   |   V(s0) = 6.412   V(s1) = 9.655   V(s2) = 7.176\n",
      "\n",
      "iter   28   |   diff: 0.04112   |   V(s0) = 6.458   V(s1) = 9.700   V(s2) = 7.221\n",
      "\n",
      "iter   29   |   diff: 0.03701   |   V(s0) = 6.499   V(s1) = 9.741   V(s2) = 7.262\n",
      "\n",
      "iter   30   |   diff: 0.03331   |   V(s0) = 6.536   V(s1) = 9.778   V(s2) = 7.299\n",
      "\n",
      "iter   31   |   diff: 0.02998   |   V(s0) = 6.570   V(s1) = 9.812   V(s2) = 7.333\n",
      "\n",
      "iter   32   |   diff: 0.02698   |   V(s0) = 6.599   V(s1) = 9.842   V(s2) = 7.363\n",
      "\n",
      "iter   33   |   diff: 0.02428   |   V(s0) = 6.626   V(s1) = 9.869   V(s2) = 7.390\n",
      "\n",
      "iter   34   |   diff: 0.02185   |   V(s0) = 6.651   V(s1) = 9.893   V(s2) = 7.414\n",
      "\n",
      "iter   35   |   diff: 0.01967   |   V(s0) = 6.673   V(s1) = 9.915   V(s2) = 7.436\n",
      "\n",
      "iter   36   |   diff: 0.01770   |   V(s0) = 6.692   V(s1) = 9.935   V(s2) = 7.456\n",
      "\n",
      "iter   37   |   diff: 0.01593   |   V(s0) = 6.710   V(s1) = 9.952   V(s2) = 7.473\n",
      "\n",
      "iter   38   |   diff: 0.01434   |   V(s0) = 6.726   V(s1) = 9.968   V(s2) = 7.489\n",
      "\n",
      "iter   39   |   diff: 0.01290   |   V(s0) = 6.740   V(s1) = 9.983   V(s2) = 7.503\n",
      "\n",
      "iter   40   |   diff: 0.01161   |   V(s0) = 6.753   V(s1) = 9.995   V(s2) = 7.516\n",
      "\n",
      "iter   41   |   diff: 0.01045   |   V(s0) = 6.765   V(s1) = 10.007   V(s2) = 7.528\n",
      "\n",
      "iter   42   |   diff: 0.00941   |   V(s0) = 6.775   V(s1) = 10.017   V(s2) = 7.538\n",
      "\n",
      "iter   43   |   diff: 0.00847   |   V(s0) = 6.785   V(s1) = 10.027   V(s2) = 7.548\n",
      "\n",
      "iter   44   |   diff: 0.00762   |   V(s0) = 6.793   V(s1) = 10.035   V(s2) = 7.556\n",
      "\n",
      "iter   45   |   diff: 0.00686   |   V(s0) = 6.801   V(s1) = 10.043   V(s2) = 7.564\n",
      "\n",
      "iter   46   |   diff: 0.00617   |   V(s0) = 6.808   V(s1) = 10.050   V(s2) = 7.571\n",
      "\n",
      "iter   47   |   diff: 0.00555   |   V(s0) = 6.814   V(s1) = 10.056   V(s2) = 7.577\n",
      "\n",
      "iter   48   |   diff: 0.00500   |   V(s0) = 6.819   V(s1) = 10.062   V(s2) = 7.583\n",
      "\n",
      "iter   49   |   diff: 0.00450   |   V(s0) = 6.824   V(s1) = 10.067   V(s2) = 7.588\n",
      "\n",
      "iter   50   |   diff: 0.00405   |   V(s0) = 6.829   V(s1) = 10.071   V(s2) = 7.592\n",
      "\n",
      "iter   51   |   diff: 0.00364   |   V(s0) = 6.833   V(s1) = 10.075   V(s2) = 7.596\n",
      "\n",
      "iter   52   |   diff: 0.00328   |   V(s0) = 6.836   V(s1) = 10.079   V(s2) = 7.600\n",
      "\n",
      "iter   53   |   diff: 0.00295   |   V(s0) = 6.840   V(s1) = 10.082   V(s2) = 7.603\n",
      "\n",
      "iter   54   |   diff: 0.00266   |   V(s0) = 6.843   V(s1) = 10.085   V(s2) = 7.606\n",
      "\n",
      "iter   55   |   diff: 0.00239   |   V(s0) = 6.845   V(s1) = 10.088   V(s2) = 7.609\n",
      "\n",
      "iter   56   |   diff: 0.00215   |   V(s0) = 6.848   V(s1) = 10.090   V(s2) = 7.611\n",
      "\n",
      "iter   57   |   diff: 0.00194   |   V(s0) = 6.850   V(s1) = 10.092   V(s2) = 7.613\n",
      "\n",
      "iter   58   |   diff: 0.00174   |   V(s0) = 6.852   V(s1) = 10.094   V(s2) = 7.615\n",
      "\n",
      "iter   59   |   diff: 0.00157   |   V(s0) = 6.854   V(s1) = 10.096   V(s2) = 7.617\n",
      "\n",
      "iter   60   |   diff: 0.00141   |   V(s0) = 6.855   V(s1) = 10.097   V(s2) = 7.618\n",
      "\n",
      "iter   61   |   diff: 0.00127   |   V(s0) = 6.857   V(s1) = 10.099   V(s2) = 7.620\n",
      "\n",
      "iter   62   |   diff: 0.00114   |   V(s0) = 6.858   V(s1) = 10.100   V(s2) = 7.621\n",
      "\n",
      "iter   63   |   diff: 0.00103   |   V(s0) = 6.859   V(s1) = 10.101   V(s2) = 7.622\n",
      "\n",
      "iter   64   |   diff: 0.00093   |   V(s0) = 6.860   V(s1) = 10.102   V(s2) = 7.623\n",
      "\n",
      "Terminated\n"
     ]
    }
   ],
   "source": [
    "gamma = 0.9            \n",
    "num_iter = 100        \n",
    "min_difference = 0.001\n",
    "\n",
    "state_values = {s: 0 for s in mdp.get_all_states()} # для всех состояний инициализируем изначально V(s) равные 0\n",
    "\n",
    "for i in range(num_iter):\n",
    "    new_state_values = {state: get_new_state_value(mdp, state_values, state, gamma)\n",
    "        for state in mdp.get_all_states()\n",
    "    }\n",
    "\n",
    "    assert isinstance(new_state_values, dict)\n",
    "\n",
    "   \n",
    "    diff = max(abs(new_state_values[s] - state_values[s])\n",
    "               for s in mdp.get_all_states())\n",
    "    print(\"iter %4i   |   diff: %6.5f   |   \" % (i, diff), end=\"\")\n",
    "    print('   '.join(\"V(%s) = %.3f\" % (s, v)\n",
    "                     for s, v in state_values.items()), end='\\n\\n')\n",
    "    state_values = new_state_values\n",
    "\n",
    "    if diff < min_difference:\n",
    "        print(\"Terminated\")\n",
    "        break"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "def get_optimal_action(mdp, state_values, state, gamma=0.9):\n",
    "    \"\"\" Finds optimal action using formula above. \"\"\"\n",
    "    if mdp.is_terminal(state): return None\n",
    "    \n",
    "    next_actions = mdp.get_possible_actions(state)\n",
    "    q_values = [\n",
    "        get_action_value(\n",
    "            mdp, state_values, state, action, gamma\n",
    "        ) for action in next_actions \n",
    "        ]\n",
    "\n",
    "    return next_actions [np.argmax(q_values)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "assert get_optimal_action(mdp, state_values, 's0', gamma) == 'a1'\n",
    "assert get_optimal_action(mdp, state_values, 's1', gamma) == 'a0'\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "average reward:  0.7746\n"
     ]
    },
    {
     "ename": "AssertionError",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mAssertionError\u001b[0m                            Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-38-0d4f0bcb5ce2>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      7\u001b[0m \u001b[0mprint\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m\"average reward: \"\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mmean\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mrewards\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      8\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 9\u001b[1;33m \u001b[1;32massert\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;36m0.85\u001b[0m \u001b[1;33m<\u001b[0m \u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mmean\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mrewards\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;33m<\u001b[0m \u001b[1;36m1.0\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;31mAssertionError\u001b[0m: "
     ]
    }
   ],
   "source": [
    "s = mdp.reset()\n",
    "rewards = []\n",
    "for _ in range(10000):\n",
    "    s, r, done, _ = mdp.step(get_optimal_action(mdp, state_values, s, gamma=0.9))\n",
    "    rewards.append(r)\n",
    "\n",
    "print(\"average reward: \", np.mean(rewards))\n",
    "\n",
    "assert(0.85 < np.mean(rewards) < 1.0)                              \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
